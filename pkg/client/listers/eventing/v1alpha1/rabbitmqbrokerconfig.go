/*
Copyright 2022 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/eventing-rabbitmq/pkg/apis/eventing/v1alpha1"
)

// RabbitmqBrokerConfigLister helps list RabbitmqBrokerConfigs.
// All objects returned here must be treated as read-only.
type RabbitmqBrokerConfigLister interface {
	// List lists all RabbitmqBrokerConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RabbitmqBrokerConfig, err error)
	// RabbitmqBrokerConfigs returns an object that can list and get RabbitmqBrokerConfigs.
	RabbitmqBrokerConfigs(namespace string) RabbitmqBrokerConfigNamespaceLister
	RabbitmqBrokerConfigListerExpansion
}

// rabbitmqBrokerConfigLister implements the RabbitmqBrokerConfigLister interface.
type rabbitmqBrokerConfigLister struct {
	indexer cache.Indexer
}

// NewRabbitmqBrokerConfigLister returns a new RabbitmqBrokerConfigLister.
func NewRabbitmqBrokerConfigLister(indexer cache.Indexer) RabbitmqBrokerConfigLister {
	return &rabbitmqBrokerConfigLister{indexer: indexer}
}

// List lists all RabbitmqBrokerConfigs in the indexer.
func (s *rabbitmqBrokerConfigLister) List(selector labels.Selector) (ret []*v1alpha1.RabbitmqBrokerConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RabbitmqBrokerConfig))
	})
	return ret, err
}

// RabbitmqBrokerConfigs returns an object that can list and get RabbitmqBrokerConfigs.
func (s *rabbitmqBrokerConfigLister) RabbitmqBrokerConfigs(namespace string) RabbitmqBrokerConfigNamespaceLister {
	return rabbitmqBrokerConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RabbitmqBrokerConfigNamespaceLister helps list and get RabbitmqBrokerConfigs.
// All objects returned here must be treated as read-only.
type RabbitmqBrokerConfigNamespaceLister interface {
	// List lists all RabbitmqBrokerConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RabbitmqBrokerConfig, err error)
	// Get retrieves the RabbitmqBrokerConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RabbitmqBrokerConfig, error)
	RabbitmqBrokerConfigNamespaceListerExpansion
}

// rabbitmqBrokerConfigNamespaceLister implements the RabbitmqBrokerConfigNamespaceLister
// interface.
type rabbitmqBrokerConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RabbitmqBrokerConfigs in the indexer for a given namespace.
func (s rabbitmqBrokerConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RabbitmqBrokerConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RabbitmqBrokerConfig))
	})
	return ret, err
}

// Get retrieves the RabbitmqBrokerConfig from the indexer for a given namespace and name.
func (s rabbitmqBrokerConfigNamespaceLister) Get(name string) (*v1alpha1.RabbitmqBrokerConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rabbitmqbrokerconfig"), name)
	}
	return obj.(*v1alpha1.RabbitmqBrokerConfig), nil
}
